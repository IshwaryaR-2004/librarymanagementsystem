package jav;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Administrator
 */
public class TakeBook extends javax.swing.JFrame {

    /**
     * Creates new form TakeBook
     */
    public TakeBook() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Take");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Return");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Close");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(191, 191, 191)
                .addComponent(jButton1)
                .addGap(61, 61, 61)
                .addComponent(jButton2)
                .addGap(67, 67, 67)
                .addComponent(jButton3)
                .addContainerGap(259, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(131, 131, 131)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap(238, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                        
       
        try {
        String bookid = JOptionPane.showInputDialog(this, "Enter bookid");
        String userid = JOptionPane.showInputDialog(this, "Enter userid");
        String fromdate = JOptionPane.showInputDialog(this, "Enter Fromdate (YYYY-MM-DD)");
        String todate = JOptionPane.showInputDialog(this, "Enter toDate (YYYY-MM-DD)");
        String copiestaken = JOptionPane.showInputDialog(this, "Enter Copies needed by user");
       
        if (bookid.isEmpty() || userid.isEmpty() || fromdate.isEmpty() || todate.isEmpty() || copiestaken.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Enter all fields");
            return;
        }

        String url = "jdbc:mysql://localhost:3306/javaproject";
        String username = "root";
        String password = "Ishwarya@2004";

        Class.forName("com.mysql.cj.jdbc.Driver");

        try (Connection con = DriverManager.getConnection(url, username, password)) {
            // Check available copies
            String checkQuery = "SELECT noofcopies FROM book WHERE bookid = ?";
            PreparedStatement checkPst = con.prepareStatement(checkQuery);
            checkPst.setString(1, bookid);
            ResultSet rs = checkPst.executeQuery();

            if (rs.next()) {
                int availableCopies = rs.getInt("noofcopies");
                int requestedCopies = Integer.parseInt(copiestaken);

                if (requestedCopies > availableCopies) {
                    JOptionPane.showMessageDialog(this, "Not enough copies available!");
                    return;
                }

                // Calculate days overdue
                LocalDate today = LocalDate.now();
                LocalDate dueDate = LocalDate.parse(todate);
                long daysOverdue = ChronoUnit.DAYS.between(dueDate, today);

                if (daysOverdue > 1) {
                    String paymentMessage = "Payment = " + daysOverdue + " days. and pay "+ daysOverdue;
                    int response = JOptionPane.showConfirmDialog(this, paymentMessage + "\nProceed with payment?", "Payment Required", JOptionPane.OK_CANCEL_OPTION);
                    if (response == JOptionPane.OK_OPTION) {
                        JOptionPane.showMessageDialog(this, "Payment successful!");
                    }
                }

                // Insert into takebook1
                String insertQuery = "INSERT INTO takebook(bookid, userid, fromdate, todate, copiestaken) VALUES(?, ?, ?, ?, ?)";
                PreparedStatement insertPst = con.prepareStatement(insertQuery);
                insertPst.setString(1, bookid);
                insertPst.setString(2, userid);
                insertPst.setString(3, fromdate);
                insertPst.setString(4, todate);
                insertPst.setString(5, copiestaken);
                insertPst.executeUpdate();
               
                // Update the number of available copies
                String updateQuery = "UPDATE book SET noofcopies = noofcopies - ? WHERE bookid = ?";
                PreparedStatement updatePst = con.prepareStatement(updateQuery);
                updatePst.setInt(1, requestedCopies);
                updatePst.setString(2, bookid);
                updatePst.executeUpdate();

                JOptionPane.showMessageDialog(this, "Book details saved successfully!");
            } else {
                JOptionPane.showMessageDialog(this, "Book ID not found!");
            }
        }
    } catch (ClassNotFoundException ex) {
        Logger.getLogger(TakeBook.class.getName()).log(Level.SEVERE, null, ex);
    } catch (SQLException ex) {
        Logger.getLogger(TakeBook.class.getName()).log(Level.SEVERE, null, ex);
    }
    }                                        

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                        
        try {
        String bookid = JOptionPane.showInputDialog(this, "Enter bookid");
        String userid = JOptionPane.showInputDialog(this, "Enter userid");
        String copiestobereturn = JOptionPane.showInputDialog(this, "Enter Copies returned by user");

        if (bookid.isEmpty() || userid.isEmpty() || copiestobereturn.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Enter all fields");
            return;
        }

        String url = "jdbc:mysql://localhost:3306/javaproject";
        String username = "root";
        String password = "Ishwarya@2004";

        Class.forName("com.mysql.cj.jdbc.Driver");

        try (Connection con = DriverManager.getConnection(url, username, password)) {
           
            String fetchQuery = "SELECT todate FROM takebook WHERE bookid = ? AND userid = ?";
            PreparedStatement fetchPst = con.prepareStatement(fetchQuery);
            fetchPst.setString(1, bookid);
            fetchPst.setString(2, userid);
            ResultSet rs = fetchPst.executeQuery();

            if (rs.next()) {
                Date returnDate = rs.getDate("todate");
                LocalDate dueDate = returnDate.toLocalDate();
                LocalDate today = LocalDate.now();
                long daysOverdue = ChronoUnit.DAYS.between(dueDate, today);

                if (daysOverdue > 1) {
                    String paymentMessage = "Payment = " + daysOverdue + " days. pay "+daysOverdue;
                    int response = JOptionPane.showConfirmDialog(this, paymentMessage + "\nProceed with payment?", "Payment Required", JOptionPane.OK_CANCEL_OPTION);
                    if (response == JOptionPane.OK_OPTION) {
                        JOptionPane.showMessageDialog(this, "Payment successful!");
                    }
                }

               
                String returnQuery = "DELETE FROM takebook WHERE bookid = ? AND userid = ?";
                PreparedStatement returnPst = con.prepareStatement(returnQuery);
                returnPst.setString(1, bookid);
                returnPst.setString(2, userid);
                returnPst.executeUpdate();

               
                String updateQuery = "UPDATE book SET noofcopies = noofcopies + ? WHERE bookid = ?";
                PreparedStatement updatePst = con.prepareStatement(updateQuery);
                updatePst.setInt(1, Integer.parseInt(copiestobereturn));
                updatePst.setString(2, bookid);
                updatePst.executeUpdate();

                JOptionPane.showMessageDialog(this, "Book returned successfully!");
            } else {
                JOptionPane.showMessageDialog(this, "No record found for the given Book ID and User ID!");
            }
        }
    } catch (ClassNotFoundException ex) {
        Logger.getLogger(TakeBook.class.getName()).log(Level.SEVERE, null, ex);
    } catch (SQLException ex) {
        Logger.getLogger(TakeBook.class.getName()).log(Level.SEVERE, null, ex);
    }

    }                                        

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                        
        setVisible(false);
        new Home().setVisible(true);
    }                                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TakeBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TakeBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TakeBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TakeBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TakeBook().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                    
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    // End of variables declaration                  
}